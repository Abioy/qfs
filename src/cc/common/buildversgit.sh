#!/bin/sh
#
# $Id$
#
# Created 2011/05/04
# Author: Mike Ovsiannikov
#
# Copyright 2011-2012 Quantcast Corp.
#
# This file is part of Kosmos File System (KFS).
#
# Licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# Create Version.cc file with the relevant source / build information.
#
#

if [ x"$1" = x'-g' -o  x"$1" = x'-get' ]; then
    while [ $# -gt 1 ]; do
        shift
        strings -a "$1" | awk '/KFS_BUILD_INFO_START/,/KFS_BUILD_INFO_END/'
    done
    exit
fi

# Set official release version here.
# kfs_release_version

if [ $# -eq 1 -a x"$1" = x'-v' ]; then
    if [ x"$kfs_release_version" != x ]; then
        echo "$kfs_release_version"
        exit
    fi
    (
        cd "`dirname "$0"`" >/dev/null || exit
        git log -n 1 --pretty=format:%H
    ) 2>/dev/null
    exit 0
fi

if [ $# -lt 3 ]; then
    echo "Usage: $0 <build type> <source dir> <dest file>"
    echo "or: $0 -g <kfs executable>"
    exit 1
fi


buildtype=$1
shift
sourcedir=$1
shift
outfile=$1
shift

if [ x"$kfs_release_version" != x ]; then
    kfs_version_prefix="${kfs_release_version}-"
else
    kfs_version_prefix=''
fi

lastchangeid=`git log -n 1 --pretty=format:%H -- "$sourcedir" 2>/dev/null`
if [ x"$lastchangeid" = x ]; then
    remote='unspecified'
    branch='unspecified'
else
    remote=`git remote -v show | awk '{if($NF=="(fetch)") { printf("%s", $2); exit; }}'`
    branch=`git branch --no-color | awk '{if($1=="*") { if ($3 != "branch)") printf("%s", $2); exit; }}'`
fi

tmpfile="$outfile.$$.tmp";

{
echo '
// Generated by '"$0"'. Do not edit.

#include "Version.h"
#include "hsieh_hash.h"

namespace KFS {

const std::string KFS_BUILD_INFO_STRING='

{
echo KFS_BUILD_INFO_START
echo "host: `hostname`"
echo "user: $USER"
echo "date: `date`" 
echo "build type: $buildtype"
while [ $# -gt 0 ]; do
    echo "$1"
    shift
done
if [ x"$kfs_release_version" != x ]; then
    echo "release: $kfs_release_version"
else
    echo "release: none"
fi
if [  x"$lastchangeid" != x ]; then
    echo "git config:"
    git config -l
    echo "git status:"
    git status --porcelain -- "$sourcedir"
    echo "git branch:"
    git branch -v --no-abbrev --no-color
    echo "git remote:"
    git remote -v
    echo "version:"
    echo "${remote}/${branch}@$lastchangeid"
else
    echo 'git source build version not available'
fi
echo KFS_BUILD_INFO_END
} | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/^/"/' -e 's/$/\\n"/'

echo ';
static std::string MakeVersionHash()
{
    Hsieh_hash_fcn f;
    unsigned int h = (unsigned int)f(KFS_BUILD_INFO_STRING);
    std::string ret(2 * sizeof(h), '"'0'"');
    for (size_t i = ret.length() - 1; h != 0; i--) {
        ret[i] = "0123456789ABCDEF"[h & 0xF];
        h >>= 4;
    }
    return ret;
}
const std::string KFS_BUILD_VERSION_STRING(
    std::string("'"${kfs_release_version}${lastchangeid}-${buildtype}"'-") +
    MakeVersionHash()
);
const std::string KFS_SOURCE_REVISION_STRING(
    "'"${kfs_release_version}${remote}/${branch}@$lastchangeid"'"
);
}
'

} > "$tmpfile"
mv "$tmpfile" $outfile
